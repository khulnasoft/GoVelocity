// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: author.sql

package sqlc

import (
	"context"
)

const deleteAuthor = `-- name: DeleteAuthor :exec
DELETE FROM author WHERE id = $1
`

func (q *Queries) DeleteAuthor(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteAuthor, id)
	return err
}

const getAuthor = `-- name: GetAuthor :one
SELECT id, email, name FROM author WHERE id = $1
`

func (q *Queries) GetAuthor(ctx context.Context, id int32) (Author, error) {
	row := q.db.QueryRowContext(ctx, getAuthor, id)
	var i Author
	err := row.Scan(&i.ID, &i.Email, &i.Name)
	return i, err
}

const getAuthors = `-- name: GetAuthors :many
SELECT id, email, name FROM author
`

func (q *Queries) GetAuthors(ctx context.Context) ([]Author, error) {
	rows, err := q.db.QueryContext(ctx, getAuthors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Author
	for rows.Next() {
		var i Author
		if err := rows.Scan(&i.ID, &i.Email, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const newAuthor = `-- name: NewAuthor :one
INSERT INTO author (email, name) VALUES ($1, $2) RETURNING id, email, name
`

type NewAuthorParams struct {
	Email string
	Name  string
}

func (q *Queries) NewAuthor(ctx context.Context, arg NewAuthorParams) (Author, error) {
	row := q.db.QueryRowContext(ctx, newAuthor, arg.Email, arg.Name)
	var i Author
	err := row.Scan(&i.ID, &i.Email, &i.Name)
	return i, err
}

const updateAuthor = `-- name: UpdateAuthor :one
UPDATE author SET email = $1, name = $2 WHERE id = $3 RETURNING id, email, name
`

type UpdateAuthorParams struct {
	Email string
	Name  string
	ID    int32
}

func (q *Queries) UpdateAuthor(ctx context.Context, arg UpdateAuthorParams) (Author, error) {
	row := q.db.QueryRowContext(ctx, updateAuthor, arg.Email, arg.Name, arg.ID)
	var i Author
	err := row.Scan(&i.ID, &i.Email, &i.Name)
	return i, err
}
